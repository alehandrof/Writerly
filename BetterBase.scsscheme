@name "Writerly - BetterBase";
@author "Alex Armstrong (@alehandrof)";

/* !Colors */

// @import "colors/gruvbox";
@import "colors/solarized";
@import "colors/writer_pro";
@import "colors/random";
// $green:           #859900;

$dark0: $gb-light-dark0;
$dark1: $gb-light-dark1;
$dark2: $gb-light-dark2;
$dark3: $gb-light-dark3;
$dark4: $gb-light-dark4;
$medium: $gb-light-medium;
$light0: $gb-light-light0;
$light1: $gb-light-light1;
$light2: $gb-light-light2;
$light3: $gb-light-light3;
$light4: $gb-light-light4;
// $magenta: $gb-light-red;
// $red: $gb-light-red;
// $green: $gb-light-green;
// $yellow: $gb-light-yellow;
// $blue: $gb-light-blue;
// $orange: $gb-light-orange;
// $violet: $gb-light-purple;
// $cyan: $gb-light-aqua;

$bg:      $basecamp-tan;
$fg:      #3d3d3d;
$dark0:   mix($fg, $bg, (1-(5/60*1))*100%);  // #444
$dark1:   mix($fg, $bg, (1-(5/60*2))*100%);  // #555
$dark2:   mix($fg, $bg, (1-(5/60*3))*100%);  // #666
$dark3:   mix($fg, $bg, (1-(5/60*4))*100%);  // #777
$dark4:   mix($fg, $bg, (1-(5/60*5))*100%);  // #888
$medium:  mix($fg, $bg, (1-(5/60*6))*100%);  // #999
$light4:  mix($fg, $bg, (1-(5/60*7))*100%);  // #aaa
$light3:  mix($fg, $bg, (1-(5/60*8))*100%);  // #bbb
$light2:  mix($fg, $bg, (1-(5/60*9))*100%);  // #ccc
$light1:  mix($fg, $bg, (1-(5/60*10))*100%); // #ddd
$light0:  mix($fg, $bg, (1-(5/60*11))*100%); // #eee


$error:             $caret-magenta; // used for testing purposes
$caret:             $caret-blue;
// $gray-very-light:   $light1; // lighten($fg, 62%); // #dbdbdb;
// $gray-light:        lighten($fg, 38%); // mix($fg, $bg, 47.5%); // "#9e9e9e"
// $gray-dark:         $dark2; // lighten($fg, 14%); // mix($fg, $bg, 80.5%); // "#616161"
$gutter:            hsla(0,0,0, 0.0275); //desaturate(darken($bg, 3), 3); // "#eeeeee"
$gutter-text:       $medium;

@import "components/colors_and_styles";

/* ! Basic Settings */

* {
	caret:            $caret;
	background:       $bg;
	foreground:       $fg;
	gutter:           $gutter;
	gutterForeground: $medium;
	lineHighlight:    $gutter;
	invisibles:       $error; // doesn't do anything in ST2/3

	/* Guides */
	guide:       $light1;
	activeGuide: $medium;
	stackGuide:  $light1;

	/* Selection */
	selection:         transparentize($caret, .85); // '#00aeff22';
	selectionBorder:   transparentize($caret, .38); // '#00aeff55';
	inactiveSelection: $gutter; // '#9e9e9e33';

	/* Find */
	findHighlight:           transparentize(lighten($yellow, 38%), 0.24); // ~ '#ffc71977';
	findHighlightForeground: darken($yellow, 15%); // ~ #684f00;

	/* Brackets & Tags */
	// See also: https://www.sublimetext.com/forum/viewtopic.php?f=2&t=3007#p14196
	bracketContentsForeground: $caret;
	bracketContentsOptions:    underline;
	bracketsForeground:        $caret;
	bracketsOptions:           underline;
	tagsForeground:            $caret;
	tagsOptions:               underline;

	/* Shadow */
	shadow:      $medium;
	shadowWidth: "4";
}


/* ! Core Selectors */

comment {
	foreground: $medium;
}

constant {
	&.character,
	&.language,
	&.numeric,
	&.other {
		foreground: $violet;
	}
}

entity {
	&.name.tag {
		foreground: $magenta;
	}
	&.name.class,
	&.name.function,
	&.other.attribute-name,
	&.other.inherited-class {
		foreground: $green;
	}

	&.name.class,
	&.other.inherited-class {
		@include style(italic);
	}
}

invalid {
	@include bg($red);

	&.deprecated {
		@include bg($magenta);
	}
}

keyword {
	foreground: $magenta;
}

markup {
	&.separator,
	&.strikethrough,
	&.comment {
		foreground: $medium;
	}

	&.raw,
	&.quote {
		foreground: $dark2;
	}

	&.underline.link {
		foreground: $blue;
		&.reference {
			foreground: $violet;
		}
	}

	&.italic,
	&.quote {
		@include style(italic);
	}

	&.heading,
	&.bold,
	&.quote markup.italic markup.bold,
	&.quote markup.bold markup.italic {
		@include style(bold);
	}

	&.bold markup.italic,
	&.italic markup.bold,
	&.quote markup.bold,
	&.heading markup.italic {
		@include style(bold italic);
	}

	&.quote markup.italic {
		@include style(none);
	}
}

storage {
	foreground: $magenta;
	&.type {
		@include style(italic);
		foreground: $blue;
	}
}

string  {
	foreground: $yellow;
	punctuation {
		@include punctuation($yellow);
	}

	&.addition {
		foreground: $green;
	}
}

support {
	&.class,
	&.constant,
	&.function,
	&.type {
		foreground: $blue;
	}

	&.class,
	&.type {
		@include style(italic);
	}
}

variable {
	&.declaration, /* LESS */
	&.other,
	&.parameter {
		foreground: $orange;
	}

	&.parameter {
		@include style(italic);
	}
}


/* ! Syntax: Markdown (Typewriter) & other custom stuff */

text.html.markdown punctuation {
	// @include style(bold);
	foreground: $medium;
	@include style(none);
}

markup {
	&.strikethrough {
		@include bg($medium);
	}
}

string.other.link {
	&.inline {
		foreground: $fg;
	}

	&.title {
		foreground: $dark2;
	}
}

constant.character.hard-line-break {
	@include bg($violet);
}

/* ! Plugin: GitGutter & Syntax: Markdown (Typewriter), Critic Markup */

markup {
	&.changed {
		foreground: $yellow; // $violet (gitgutter)
	}

	&.deleted {
		foreground: $red; // $magenta (gitgutter)
	}

	&.ignored,
	&.untracked {
		foreground: $dark2;
	}

	&.inserted  {
		// @include style(italic);
		foreground: $green;
	}

	&.highlight {
		foreground: $violet;
	}
}


/* ! Syntax: Diff */

meta.diff {
	&.header {
		@include style(bold);
		background: $gutter;
		&.from-file {
			// foreground: $red;
		}
		&.to-file {
			// foreground: $green;
		}
	}
	markup {
		&.deleted {
			foreground: $fg;
			@include bg($red, 1);
		}
		&.inserted  {
			foreground: $fg;
			@include bg($green, 1);
		}
	}
}


/* ! Syntax: Find in Files */

entity.name.filename.find-in-files {
	foreground: $blue;
}

constant.numeric.line-number.find-in-files '-' match {
	foreground: $magenta;
}


/* ! Plugin: SublimeLinter */

sublimelinter.mark.warning {
	@name "SublimeLinter Warning";
	foreground: $yellow; // was: #DDB700;
}

sublimelinter.mark.error {
	@name "SublimeLinter Error";
	foreground: $red; // was: #D02000
}

sublimelinter.gutter-mark {
	@name "SublimeLinter Gutter Mark";
	foreground: $dark2; // was: #FFFFFF
}

/* ! Plugin: Bracket Highlighter */

brackethighlighter.default,
brackethighlighter.curly,
brackethighlighter.round,
brackethighlighter.square,
brackethighlighter.angle,
brackethighlighter.tag,
brackethighlighter.quote {
	foreground: $cyan;
}

brackethighlighter.unmatched {
	foreground: $red;
}

// brackethighlighter.quote {
// 	foreground: $dark2;
// }


/* ! Plugin: RawLineEdit */

glyph.carriage-return,
glyph.new-line {
	foreground: $cyan;
}


/* Make punctuation more interesting */

punctuation.definition.tag {
	@include punctuation($magenta);
}

meta.property-value punctuation {
	// @include punctuation($blue);
}